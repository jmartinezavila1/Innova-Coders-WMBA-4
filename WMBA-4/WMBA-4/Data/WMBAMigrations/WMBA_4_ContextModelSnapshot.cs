// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMBA_4.Data;

#nullable disable

namespace WMBA_4.Data.WMBAMigrations
{
    [DbContext(typeof(WMBA_4_Context))]
    partial class WMBA_4_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("WMBA_4.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WMBA_4.Models.Division", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("LeagueID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DivisionName")
                        .IsUnique();

                    b.HasIndex("LeagueID");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("WMBA_4.Models.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("score")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GameTypeID");

                    b.HasIndex("LocationID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WMBA_4.Models.GameLineUp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattingOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("GameLineUps");
                });

            modelBuilder.Entity("WMBA_4.Models.GameLineUpPosition", b =>
                {
                    b.Property<int>("GameLineUpID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameLineUpID", "PositionID");

                    b.HasIndex("PositionID");

                    b.ToTable("GameLineUpPositions");
                });

            modelBuilder.Entity("WMBA_4.Models.GameType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("WMBA_4.Models.League", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstablishYear")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("WMBA_4.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WMBA_4.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("JerseyNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MemberID")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("WMBA_4.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PositionName")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("WMBA_4.Models.ScorePlayer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Doubles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Flyout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroundOut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("H")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HBP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HR")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InningNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PopOut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("R")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RBI")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SAC")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Singles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrikeOut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Triples")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.ToTable("ScorePlayers");
                });

            modelBuilder.Entity("WMBA_4.Models.Season", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeasonCode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SeasonCode")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("WMBA_4.Models.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("WMBA_4.Models.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Coach_Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("DivisionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DivisionID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WMBA_4.Models.TeamGame", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHomeTeam")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisitorTeam")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamID", "GameID");

                    b.HasIndex("GameID");

                    b.ToTable("TeamGame");
                });

            modelBuilder.Entity("WMBA_4.Models.TeamStaff", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StaffID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamID", "StaffID");

                    b.HasIndex("StaffID");

                    b.ToTable("TeamStaff");
                });

            modelBuilder.Entity("WMBA_4.Models.Division", b =>
                {
                    b.HasOne("WMBA_4.Models.League", "League")
                        .WithMany("Divisions")
                        .HasForeignKey("LeagueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("WMBA_4.Models.Game", b =>
                {
                    b.HasOne("WMBA_4.Models.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Location", "Location")
                        .WithMany("Games")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Season", "Season")
                        .WithMany("Games")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameType");

                    b.Navigation("Location");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WMBA_4.Models.GameLineUp", b =>
                {
                    b.HasOne("WMBA_4.Models.Game", "Game")
                        .WithMany("GameLineUps")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Player", "Player")
                        .WithMany("GameLineUps")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Team", "Team")
                        .WithMany("GameLineUps")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMBA_4.Models.GameLineUpPosition", b =>
                {
                    b.HasOne("WMBA_4.Models.GameLineUp", "GameLineUp")
                        .WithMany("GameLineUpPositions")
                        .HasForeignKey("GameLineUpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Position", "Position")
                        .WithMany("GameLineUpPositions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameLineUp");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WMBA_4.Models.League", b =>
                {
                    b.HasOne("WMBA_4.Models.City", "City")
                        .WithMany("Leagues")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WMBA_4.Models.Location", b =>
                {
                    b.HasOne("WMBA_4.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WMBA_4.Models.Player", b =>
                {
                    b.HasOne("WMBA_4.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMBA_4.Models.ScorePlayer", b =>
                {
                    b.HasOne("WMBA_4.Models.Game", "Game")
                        .WithMany("ScorePlayers")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Player", "Player")
                        .WithMany("ScorePlayers")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WMBA_4.Models.Team", b =>
                {
                    b.HasOne("WMBA_4.Models.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WMBA_4.Models.TeamGame", b =>
                {
                    b.HasOne("WMBA_4.Models.Game", "Game")
                        .WithMany("TeamGames")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Team", "Team")
                        .WithMany("TeamGames")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMBA_4.Models.TeamStaff", b =>
                {
                    b.HasOne("WMBA_4.Models.Staff", "Staff")
                        .WithMany("TeamStaff")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WMBA_4.Models.Team", "Team")
                        .WithMany("TeamStaff")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WMBA_4.Models.City", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("WMBA_4.Models.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WMBA_4.Models.Game", b =>
                {
                    b.Navigation("GameLineUps");

                    b.Navigation("ScorePlayers");

                    b.Navigation("TeamGames");
                });

            modelBuilder.Entity("WMBA_4.Models.GameLineUp", b =>
                {
                    b.Navigation("GameLineUpPositions");
                });

            modelBuilder.Entity("WMBA_4.Models.GameType", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("WMBA_4.Models.League", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("WMBA_4.Models.Location", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("WMBA_4.Models.Player", b =>
                {
                    b.Navigation("GameLineUps");

                    b.Navigation("ScorePlayers");
                });

            modelBuilder.Entity("WMBA_4.Models.Position", b =>
                {
                    b.Navigation("GameLineUpPositions");
                });

            modelBuilder.Entity("WMBA_4.Models.Season", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("WMBA_4.Models.Staff", b =>
                {
                    b.Navigation("TeamStaff");
                });

            modelBuilder.Entity("WMBA_4.Models.Team", b =>
                {
                    b.Navigation("GameLineUps");

                    b.Navigation("Players");

                    b.Navigation("TeamGames");

                    b.Navigation("TeamStaff");
                });
#pragma warning restore 612, 618
        }
    }
}
