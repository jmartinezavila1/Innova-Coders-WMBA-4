@model WMBA_4.Models.Team

<h1>@Model.Name</h1>
<div class="f-in-flex">
    <p>
        Division: @Model.Division.DivisionName | Coach: <span>@(ViewBag.Coach?.FirstName + " " + ViewBag.Coach?.LastName)</span> | City: Welland Minor Baseball
    </p>
    @using (Html.BeginForm("Create", "Player", FormMethod.Get))
    {
        <button type="submit" class="btn btn-kelly">Add Player</button>
    }
</div>

@{
    var playersList = ViewData["Players"] as List<WMBA_4.Models.Player> ?? new List<WMBA_4.Models.Player>();
    var hasScheduledGames = Model.TeamGames.Any();
}
<div style="margin-bottom: 20px;">
    <button class="collapsible active" style="background-color: #4CAF50;">
        <i class="arrow fas fa-chevron-up"></i> Players
    </button>
    <div class="content" style="display: block;">
        @if (playersList.Count > 0)
        {
            <ul class="list-group">
                @foreach (var player in playersList)
                {
                    <li class="list-group-item">
                        <i class="fa-light fa-baseball">@player.FullName</i>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No players in this Team.</p>
        }
    </div>
</div>

<div style="margin-bottom: 20px;">
    <button class="collapsible active" style="background-color: #4CAF50;">
        <i class="arrow fas fa-chevron-up"></i> Scheduled Games
    </button>
    <div class="content" style="display: block; overflow-y: auto; max-height: 300px;">
        @if (hasScheduledGames)
        {
            <table class="table giro-table table-bordered">
                <thead>
                    <tr>
                        <th>
                            Match
                        </th>
                        <th>Game Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var teamGame in Model.TeamGames)
                    {
                        var homeTeamName = teamGame.Game.TeamGames.FirstOrDefault(tg => tg.IsHomeTeam)?.Team.Name;
                        var visitorTeamName = teamGame.Game.TeamGames.FirstOrDefault(tg => tg.IsVisitorTeam)?.Team.Name;
                        var gameid = teamGame.GameID;
                        <tr>
                            <td>@(homeTeamName ?? "Unknown Team") VS @(visitorTeamName ?? "Unknown Team")</td>
                            <td>@teamGame.Game.Date</td>
                            <td>
                                <div>
                                    @using (Html.BeginForm("Details", "Game", FormMethod.Post))
                                    {
                                        @Html.Hidden("gameid", gameid)
                                        @Html.Hidden("team", teamGame.TeamID)

                                        <button type="submit" class="btn-kelly btn-text text-no-deco">LineUp</button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No scheduled games for this team.</p>
        }
    </div>
</div>

<div>
    <div class="form-group">
        <a href='@ViewData["returnURL"]' class="btn btn-outline-secondary mx-1">Back to the @ViewData["ControllerName"] List</a>
    </div>
</div>

<style>
    .collapsible {
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
        padding: 10px 20px; /* Adjust padding for oval shape */
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        border-radius: 50px; /* Make it an oval shape */
    }

        .active, .collapsible:hover {
            background-color: #46a049;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
        border-radius: 20px; /* Adjust border radius for content */
    }

    .arrow {
        transition: transform 0.3s ease;
    }

        .arrow.rotate {
            transform: rotate(180deg);
        }
</style>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        var content = coll[i].nextElementSibling;
        var arrow = coll[i].querySelector('.arrow');

        // Initially open all collapsible sections
        content.style.display = "block";
        arrow.classList.add('rotate');

        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            var arrow = this.querySelector('.arrow');
            if (content.style.display === "block") {
                content.style.display = "none";
                arrow.classList.remove('rotate');
            } else {
                content.style.display = "block";
                arrow.classList.add('rotate');
            }
        });
    }
</script>
