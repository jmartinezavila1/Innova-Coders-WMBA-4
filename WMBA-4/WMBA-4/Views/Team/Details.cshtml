@model WMBA_4.Models.Team
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Details";
    // Get the current user
    var user = await UserManager.GetUserAsync(User);

    // Check if the user is in the "Scorekeeper" role
    var isScorekeeper = await UserManager.IsInRoleAsync(user, "Scorekeeper");

}

@* page navigation *@
<nav aria-label="breadcrumb">
    <ol class="breadcrumb breadcrumb-chevron p-3 bg-breadcrumble rounded-3">
        <li class="breadcrumb-item">
            <a class="link-body-emphasis" asp-controller="Home" asp-action="Index">
                <i class="bi bi-house-door-fill"></i>
            </a>
        </li>
        <li class="breadcrumb-item">
            <a class="link-body-emphasis fw-semibold text-decoration-none" asp-controller="Team" asp-action="Index">Team</a>
        </li>
        <li class="breadcrumb-item" aria-current="page">
            Detail
        </li>
    </ol>
</nav>
@* page navigation *@

<div class="f-in-flex">
    <h1>@Model.Name</h1>
    <div class="d-flex">
        @if (!isScorekeeper)
        {
            @using (Html.BeginForm("Create", "Player", FormMethod.Get))
            {
                <button type="submit" class="btn btn-kelly me-2">Add Player</button>
            }
        }
        @if (!isScorekeeper)
        {
            @using (Html.BeginForm("Create", "Game", FormMethod.Get))
            {
                <button type="submit" class="btn btn-kelly">Add Game</button>
            }
        }
    </div>
</div>

<div class="f-in-flex">
    <p>
        Division: @Model.Division.DivisionName | Coach: <span>@(ViewBag.Coach?.FirstName + " " + ViewBag.Coach?.LastName)</span> | Club: Welland Minor Baseball
    </p>
</div>

@{
    var playersList = ViewData["Players"] as List<WMBA_4.Models.Player> ?? new List<WMBA_4.Models.Player>();
    var hasScheduledGames = Model.TeamGames.Any();
}

<div class="row">
    <div class="col-md-4">
        <div style="margin-bottom: 20px;">
            <button class="collapsible active bg-kelly li-flex">
                <div>
                    <i class="arrow fas fa-chevron-up me-1"></i>
                    <span>Players</span>
                </div>
                <div>
                    <span class="badge text-bg-light">@playersList.Count</span>
                </div>
            </button>
            <div class="content mt-2 me-4 ms-2 py-2" style="display: block; overflow-y: auto; max-height: 500px;">
                @if (playersList.Count > 0)
                {
                    var sortedPlayers = playersList.OrderBy(p => p.FullName);

                    <ul class="list-group list-group-flush" id="teamPlayerList">
                        @foreach (var player in sortedPlayers)
                        {
                            <li class="list-group-item w-100">
                                <a asp-action="Details" asp-controller="Player" asp-route-id="@player.ID" class="text-decoration-none ft-black w-100 zoom-player cursor-pointer">
                                    <div class="w-100">
                                        <span class="fa-light fa-baseball">@player.FullName</span>
                                    </div>
                                </a>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No players in this Team.</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="mb-4">
            <button class="collapsible active bg-kelly li-flex">
                <div>
                    <i class="arrow fas fa-chevron-up me-1"></i>
                    <span>Scheduled Games</span>
                </div>
                <div>
                    <span class="badge text-bg-light">@Model.TeamGames.Count</span>
                </div>
            </button>
            <div class="content mt-2 mx-4" style="display: block; overflow-y: auto; max-height: 500px;">
                @if (hasScheduledGames)
                {
                    var today = DateTime.Today;
                    var futureGames = Model.TeamGames
                    .Where(tg => tg.Game.Date >= today && tg.Game.Status == true)
                    .OrderBy(tg => tg.Game.Date);

                    var pastGames = Model.TeamGames
                    .Where(tg => tg.Game.Date < today && tg.Game.Status == true)
                    .OrderBy(tg => tg.Game.Date);

                    var allGames = futureGames.Concat(pastGames);

                    <table class="table giro-table table-bordered">
                        <thead>
                            <tr>
                                <th>
                                    Match
                                </th>
                                <th>Game Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var teamGame in allGames)
                            {
                                var homeTeamName = teamGame.Game.TeamGames.FirstOrDefault(tg => tg.IsHomeTeam)?.Team.Name;
                                var visitorTeamName = teamGame.Game.TeamGames.FirstOrDefault(tg => tg.IsVisitorTeam)?.Team.Name;
                                var gameid = teamGame.GameID;
                                <tr>
                                    <td>@(homeTeamName ?? "Unknown Team") VS @(visitorTeamName ?? "Unknown Team")</td>
                                    <td>@teamGame.Game.Date.ToString("MMMM dd hh:mm tt")</td>
                                    <td>
                                        <div>
                                            @using (Html.BeginForm("Details", "Game", FormMethod.Post))
                                            {
                                                @Html.Hidden("gameid", gameid)
                                                @Html.Hidden("team", teamGame.TeamID)

                                                <button type="submit" class="btn btn-kelly btn-text text-no-deco">Line Up</button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No scheduled games for this team.</p>
                }
            </div>
        </div>
    </div>
</div>
<div>
    <div class="form-group">
        <a href='@ViewData["returnURL"]' class="btn btn-outline-secondary mx-1">Back to the @ViewData["ControllerName"] List</a>
    </div>
</div>


<style>
    .active, .collapsible {
        background-color: #23314E;
        color: white;
        cursor: pointer;
        padding: 10px 20px; /* Adjust padding for oval shape */
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        border-radius: 50px; /* Make it an oval shape */
    }

        .collapsible:hover {
            background-color: #23b51c;
        }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        border-radius: 20px; /* Adjust border radius for content */
    }

    .arrow {
        transition: transform 0.3s ease;
    }

        .arrow.rotate {
            transform: rotate(180deg);
        }
</style>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        var content = coll[i].nextElementSibling;
        var arrow = coll[i].querySelector('.arrow');

        // Initially open all collapsible sections
        content.style.display = "block";
        arrow.classList.add('rotate');

        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            var arrow = this.querySelector('.arrow');
            if (content.style.display === "block") {
                content.style.display = "none";
                arrow.classList.remove('rotate');
            } else {
                content.style.display = "block";
                arrow.classList.add('rotate');
            }
        });
    }
</script>